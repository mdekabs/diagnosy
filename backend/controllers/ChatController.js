import axios from 'axios';
import dbClient from '../storage/db.js';
import redisClient from '../storage/redis.js';

/**
 * Class representing the Chat Controller.
 */
class ChatController {
  /**
   * Creates a chat and generates a response using the Meta AI service.
   *
   * @async
   * @param {Object} request - The request object.
   * @param {Object} response - The response object.
   * @returns {Promise<void>} A Promise that resolves when the operation is complete.
   */
  static async createChat(request, response) {
    const { symptom } = request.body;
    const token = request.headers['auth-token'];

    if (!token) {
      console.error("No auth-token provided.");
      return response.status(401).json({
        status: "error",
        message: "Unauthorized! auth-token required",
        data: null,
      });
    }

    const key = `auth_${token}`;
    const userID = await redisClient.get(key);
    if (!userID) {
      console.error("Invalid token provided.");
      return response.status(401).json({
        status: "error",
        message: "Unauthorized! invalid token",
        data: null,
      });
    }

    const user = await dbClient.fetchUserByID(userID);
    if (!user) {
      console.error("User not found for ID:", userID);
      return response.status(404).json({
        status: "error",
        message: "User not found",
        data: null,
      });
    }

    if (!symptom) {
      console.error("Symptom not provided in request.");
      return response.status(400).json({
        status: "error",
        message: "Symptom is required",
        data: null,
      });
    }

    // Retrieve the existing chat history for the user
    const chats = await dbClient.fetchUserChat(userID);
    if (!chats) {
      console.error("Chat history not found for user:", userID);
      return response.status(404).json({
        status: "error",
        message: "Chat history not found",
        data: null,
      });
    }

    // Clone the chat history to ensure it is a plain array
    const chatHistory = JSON.parse(JSON.stringify(chats.history));

    let completionText;
    try {
      // Append user's symptom to the chat history.
      chatHistory.push({ role: "user", content: symptom });
      console.log("User symptom appended to chat history.");

      // Call the Meta AI service.
      const metaAiUrl = process.env.META_AI_URL || 'http://localhost:5000/chat';
      const metaResponse = await axios.post(metaAiUrl, { message: symptom });
      
      // Extract only the message from the Meta AI response.
      completionText = metaResponse.data.response.message;
      console.log("Response generated by Meta AI:", completionText);

      // Append assistant's response to the chat history.
      chatHistory.push({ role: "assistant", content: completionText });

      // Update the chat history in the database.
      await dbClient.updateChatHistory(chats._id, chatHistory);
      console.log("Chat history updated in the database.");
    } catch (error) {
      console.error("Error during chat creation:", error);
      return response.status(504).json({
        status: "error",
        message: error.message,
        data: null,
      });
    }

    return response.status(200).json({
      status: "success",
      message: "Response generated successfully!",
      data: {
        advice: completionText,
      },
    });
  }

  /**
   * Retrieves the chat history for the authenticated user.
   *
   * @async
   * @param {Object} request - The request object.
   * @param {Object} response - The response object.
   * @returns {Promise<void>} A Promise that resolves when the operation is complete.
   */
  static async getChatHistory(request, response) {
    const token = request.headers['auth-token'];

    if (!token) {
      console.error("No auth-token provided.");
      return response.status(401).json({
        status: "error",
        message: "Unauthorized! auth-token required",
        data: null,
      });
    }

    const key = `auth_${token}`;
    const userID = await redisClient.get(key);
    if (!userID) {
      console.error("Invalid token provided.");
      return response.status(401).json({
        status: "error",
        message: "Unauthorized! invalid token",
        data: null,
      });
    }

    const user = await dbClient.fetchUserByID(userID);
    if (!user) {
      console.error("User not found for ID:", userID);
      return response.status(404).json({
        status: "error",
        message: "User not found",
        data: null,
      });
    }

    try {
      const chats = await dbClient.fetchUserChat(userID);
      console.log("Chat history retrieved for user:", userID);
      return response.status(200).json({
        status: "success",
        message: "Chat history retrieved successfully!",
        data: { chats },
      });
    } catch (error) {
      console.error("Error retrieving chat history:", error);
      return response.status(504).json({
        status: "error",
        message: error.message,
        data: null,
      });
    }
  }
}

export default ChatController;
