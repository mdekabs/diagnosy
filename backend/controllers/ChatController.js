import axios from 'axios';
import dbClient from '../storage/db.js';
import redisClient from '../storage/redis.js';

// Constants for Authentication
const AUTH_PREFIX = "auth_";
const STATUS_SUCCESS = "success";
const STATUS_ERROR = "error";

// Constants for Messages
const MSG_NO_AUTH_TOKEN = "Unauthorized! auth-token required";
const MSG_INVALID_TOKEN = "Unauthorized! invalid token";
const MSG_USER_NOT_FOUND = "User not found";
const MSG_NO_SYMPTOM = "Symptom is required";
const MSG_CHAT_HISTORY_NOT_FOUND = "Chat history not found";
const MSG_RESPONSE_SUCCESS = "Response generated successfully!";
const MSG_CHAT_HISTORY_RETRIEVED = "Chat history retrieved successfully!";

// Constant for Meta AI
const META_AI_DEFAULT_URL = 'http://localhost:5000/chat';

// Disclaimer constant for the returned response.
const DISCLAIMER_MESSAGE = "Please note: This advice is not a substitute for professional medical care.";

/**
 * Class representing the Chat Controller.
 */
class ChatController {
  /**
   * Creates a chat and generates a response using the Meta AI service.
   *
   * @async
   * @param {Object} request - The request object.
   * @param {Object} response - The response object.
   * @returns {Promise<void>}
   */
  static async createChat(request, response) {
    try {
      const { symptom } = request.body;
      const token = request.headers['auth-token'];

      // Validate authentication token
      if (!token) {
        const errMsg = `createChat: ${MSG_NO_AUTH_TOKEN}`;
        console.error(errMsg);
        return response.status(401).json({
          status: STATUS_ERROR,
          message: MSG_NO_AUTH_TOKEN,
          data: null,
        });
      }

      const key = `${AUTH_PREFIX}${token}`;
      const userID = await redisClient.get(key);
      if (!userID) {
        const errMsg = `createChat: Token ${token} is invalid or expired.`;
        console.error(errMsg);
        return response.status(401).json({
          status: STATUS_ERROR,
          message: MSG_INVALID_TOKEN,
          data: null,
        });
      }

      const user = await dbClient.fetchUserByID(userID);
      if (!user) {
        const errMsg = `createChat: No user found for userID ${userID}.`;
        console.error(errMsg);
        return response.status(404).json({
          status: STATUS_ERROR,
          message: MSG_USER_NOT_FOUND,
          data: null,
        });
      }

      // Validate symptom input
      if (!symptom) {
        const errMsg = "createChat: Symptom not provided in request.";
        console.error(errMsg);
        return response.status(400).json({
          status: STATUS_ERROR,
          message: MSG_NO_SYMPTOM,
          data: null,
        });
      }

      // Retrieve the existing chat history for the user
      const chats = await dbClient.fetchUserChat(userID);
      if (!chats) {
        const errMsg = `createChat: Chat history not found for userID ${userID}.`;
        console.error(errMsg);
        return response.status(404).json({
          status: STATUS_ERROR,
          message: MSG_CHAT_HISTORY_NOT_FOUND,
          data: null,
        });
      }

      // Clone the chat history to ensure it is a plain array (removes potential circular references)
      const chatHistory = JSON.parse(JSON.stringify(chats.history));

      let completionText;
      try {
        // Append user's symptom to the chat history.
        chatHistory.push({ role: "user", content: symptom });
        console.info("createChat: User symptom appended to chat history.");

        // Call the Meta AI service.
        const metaAiUrl = process.env.META_AI_URL || META_AI_DEFAULT_URL;
        const metaResponse = await axios.post(metaAiUrl, { message: symptom });
        
        // Extract only the message from the Meta AI response.
        if (
          !metaResponse.data ||
          !metaResponse.data.response ||
          !metaResponse.data.response.message
        ) {
          const errMsg = "createChat: Invalid response format from Meta AI.";
          console.error(errMsg, metaResponse.data);
          throw new Error(errMsg);
        }
        completionText = metaResponse.data.response.message;
        console.info("createChat: Response generated by Daisy:", completionText);

        // Append assistant's response to the chat history.
        chatHistory.push({ role: "assistant", content: completionText });

        // Update the chat history in the database.
        await dbClient.updateChatHistory(chats._id, chatHistory);
        console.info("createChat: Chat history updated in the database.");
      } catch (innerError) {
        console.error("createChat: Error during Daisy call or database update:", innerError);
        return response.status(504).json({
          status: STATUS_ERROR,
          message: `Meta AI error: ${innerError.message}`,
          data: null,
        });
      }

      return response.status(200).json({
        status: STATUS_SUCCESS,
        message: MSG_RESPONSE_SUCCESS,
        data: {
          advice: completionText,
          disclaimer: DISCLAIMER_MESSAGE,
        },
      });
    } catch (error) {
      console.error("createChat: Internal server error:", error);
      return response.status(500).json({
        status: STATUS_ERROR,
        message: `Internal Server Error: ${error.message}`,
        data: null,
      });
    }
  }

  /**
   * Retrieves the chat history for the authenticated user.
   *
   * @async
   * @param {Object} request - The request object.
   * @param {Object} response - The response object.
   * @returns {Promise<void>}
   */
  static async getChatHistory(request, response) {
    try {
      const token = request.headers['auth-token'];

      // Validate authentication token
      if (!token) {
        const errMsg = `getChatHistory: ${MSG_NO_AUTH_TOKEN}`;
        console.error(errMsg);
        return response.status(401).json({
          status: STATUS_ERROR,
          message: MSG_NO_AUTH_TOKEN,
          data: null,
        });
      }

      const key = `${AUTH_PREFIX}${token}`;
      const userID = await redisClient.get(key);
      if (!userID) {
        const errMsg = `getChatHistory: Token ${token} is invalid or expired.`;
        console.error(errMsg);
        return response.status(401).json({
          status: STATUS_ERROR,
          message: MSG_INVALID_TOKEN,
          data: null,
        });
      }

      const user = await dbClient.fetchUserByID(userID);
      if (!user) {
        const errMsg = `getChatHistory: No user found for userID ${userID}.`;
        console.error(errMsg);
        return response.status(404).json({
          status: STATUS_ERROR,
          message: MSG_USER_NOT_FOUND,
          data: null,
        });
      }

      // Retrieve chat history
      const chats = await dbClient.fetchUserChat(userID);
      console.info(`getChatHistory: Chat history retrieved for userID ${userID}.`);
      return response.status(200).json({
        status: STATUS_SUCCESS,
        message: MSG_CHAT_HISTORY_RETRIEVED,
        data: { chats },
      });
    } catch (error) {
      console.error("getChatHistory: Internal server error:", error);
      return response.status(504).json({
        status: STATUS_ERROR,
        message: `Internal Server Error: ${error.message}`,
        data: null,
      });
    }
  }
}

export default ChatController;
